//
// Created by admin on 10.04.2024.
//
#include "string_.h"

#ifndef PROJECT17_PROCESSING_STRING_H
#define PROJECT17_PROCESSING_STRING_H
#define MAX_STRING_SIZE 100
#define MAX_N_WORDS_IN_STRING 1000
typedef struct WordDescriptor {
    char *begin;
    char *end;
} WordDescriptor;

typedef struct BagOfWords {
    WordDescriptor words[MAX_N_WORDS_IN_STRING];
    size_t size;
} BagOfWords;



//–ø–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–µ—Ü
char *getEndOfString(char *s);

//—É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã
void removeNonLetters(char *s);

//–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –≤ –∫–∞–∂–¥–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
void removeAdjacentEqualLetters(char *s);

//–°–æ–∫—Ä–∞—Ç–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ
//–æ–¥–Ω–æ–≥–æ (void removeExtraSpaces(char *s))
void removeExtraSpaces(char *s);

// –≤—ã—Ä–∞–∂–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
int getWord(char *beginSearch, WordDescriptor *word);

// –≤—ã—Ä–∞–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ–Ω—Ü–∞
bool getWordReverse(char *rbegin, char *rend, WordDescriptor *word);

//—Ü–∏—Ñ—Ä—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ª–æ–≤–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ,
//–∞ –±—É–∫–≤—ã –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
void changeWords_numb(char *s);

//–±—É–∫–≤—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ª–æ–≤–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ,
//–∞ —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
void changeWords_Letters(char *s);

//–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä = –∫–æ–ª–∏—á–∏—Å—Ç–≤—É –ø—Ä–æ–±–µ–ª–æ–≤
void doSpace(char *s);

//–∑–∞–º–µ–Ω—è –≤—Å–µ—Ö —Å–ª–æ–≤ w1 –Ω–∞ w2
void replace(char *source, char *w1, char *w2);

//—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–ª–æ–≤, —Å–ª–æ–≤–æ–≤ w1 —Å—Ç–æ–∏—Ç –≤—ã—à–µ —á–µ–º w2 –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É 0,
//—Å–ª–æ–≤–æ–≤ w2 —Å—Ç–æ–∏—Ç –≤—ã—à–µ —á–µ–º w1 –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É 1, –µ—Å–ª–∏ —Å–ª–æ–≤–∞ —Å–æ–≤–ø–∞–ª–∏ —Ç–æ 2
int areWordsEqual_comparison(WordDescriptor w1, WordDescriptor w2);

//–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –ª–∏ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å–ª–æ–≤–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
bool OrderedWords(char *s);

//–ø–æ–ª—É—á–∞–µ–º –∞–ª—Ä–µ—Å–∞ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –≤—Å–µ—Ö —Å–ª–æ–≤
void getBagOfWords(BagOfWords *bag, char *s);

//–≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –∫–æ–Ω—Ü–∞
void print_string_revers(char *s);

//–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–∏—Å—Ç–≤–æ —Å–ª–æ–≤ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤
int count_palindrome(char *s);

//–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —á–µ—Ä–µ–¥—É—é—Ç—Å—è —Å–ª–æ–≤–∞ –ø–µ—Ä–≤–æ–π –∏ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏.
// –ï—Å–ª–∏ –≤ –æ–¥–Ω–æ–π –∏–∑ —Å—Ç—Ä–æ–∫ —á–∏—Å–ª–æ —Å–ª–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º –≤ –¥—Ä—É–≥–æ–π,
// —Ç–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–ø–∏—Å–∞–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É-—Ä–µ–∑—É–ª—å—Ç–∞—Ç
void switch_words(char *s1, char *s2, char *ans);

//–º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
void reverse_string(char *s);

//–≤—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —Å–ª–æ–≤–æ–≤–æ–º —Å –±—É–∫–≤–æ–π –∞
void printWordBeforeFirstWordWithA(char *s);

//–ø–µ—Ä–µ–≤–æ–¥ –∏–∑ wordDescriptorToString –≤ char*
void wordDescriptorToString(WordDescriptor word, char *destination);

//–µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ
bool word_in_string(WordDescriptor w, char *s);

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑ —Å–ª–æ–≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –µ—Å—Ç—å
//–≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ, –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—ë—Ç –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
WordDescriptor wordFromEndFirstLineWhichStayInSecondLine(char *s1, char *s2);

//–µ—Å—Ç—å –ª–∏ –≤ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–ª–æ–≤–∞
bool equaleWordsInstring(char *s);

//—Å–æ—Å—Ç–æ—è—Ç –ª–∏ —Å–ª–æ–≤–∞ –∏–∑ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –±—É–∫–≤
bool equaleLettersInwords(WordDescriptor w1, WordDescriptor w2);

//–µ—Å—Ç—å –ª–∏ –≤ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —Å–ª–æ–≤–∞ —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –±—É–∫–≤
bool equaleLettersInWordsInstring(char *s);

//—Ä–∞–≤–Ω—ã –ª–∏ —Å–ª–æ–≤–∞
bool equalewords(WordDescriptor w1, WordDescriptor w2);

//–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∫–æ–Ω—Ü–∞
char *reverseString(char *s);

//–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–ª–æ–≤ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ª–∏—á–Ω—ã –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞
char *wordsWhitchNotEqualeWithLast(char *s);

//–î–∞–Ω—ã –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ ùë†1 –∏ ùë†2. –ü—É—Å—Ç—å ùë§ ‚Äì –ø–µ—Ä–≤–æ–µ –∏–∑ —Å–ª–æ–≤ —Å—Ç—Ä–æ–∫–∏ ùë†1, –∫–æ—Ç–æ—Ä–æ–µ –µ—Å—Ç—å –∏ –≤
//—Å—Ç—Ä–æ–∫–µ ùë†2. –ù–∞–π—Ç–∏ —Å–ª–æ–≤–æ, –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–µ –ø–µ—Ä–≤–æ–º—É –≤—Ö–æ–∂–¥–µ–Ω–∏—é ùë§ –≤ ùë†1.
WordDescriptor wordBeforeEqualeWords(char *s1, char *s2);

//—É–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã
void DeletePalindrome(char *s);

//–ü—É—Å—Ç—å ùëõ1 ‚Äì —á–∏—Å–ª–æ —Å–ª–æ–≤ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –∞ ùëõ2 ‚Äì –≤–æ –≤—Ç–æ—Ä–æ–π.
// –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤, –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏
//—Å–ª–æ–≤–∞–º–∏ —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤.
void additionString(char *s1, char *s2, int n1, int n2);

//–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤—Ö–æ–¥–∏—Ç –ª–∏ –≤ –¥–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
bool allLettersInString(char *s, char *word);

//–ø–æ–ª—É—á–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –∏–ª–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç "\0" –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª–∞ –Ω–µ—Ç
char *find_symbl(char *s, char symbl);

//–µ—Å—Ç—å –ª–∏ –≤ —Å–ª–æ–≤–µ —Ç–∞–∫–∞—è –º–∞—Å–∫–∞ mask
bool mask_in_str(WordDescriptor *word, char *mask);

//–Ω–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ
void largestWord(char *s, char *big);

//–µ—Å—Ç—å –ª–∏ —Ç–æ—á–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ
bool point_in_string(char *string);

//—Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
int cound_symbl(char *str, char symbl);
#endif //PROJECT17_PROCESSING_STRING_H
